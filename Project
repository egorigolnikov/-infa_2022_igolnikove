from random import randint
import pygame
import numpy as np
import math
import matplotlib.pyplot as plt

FPS = 30
RED = 0xFF0000
GREY = 0x7D7D7D
WHITE = 0xFFFFFF
WIDTH = 800
HEIGHT = 600

class Roc:

    def __init__(self, screen, x=350, y=300, h = 100, w = 250, m = 30):
        self.screen = screen
        self.x = x
        self.y = y
        self.h = h
        self.w = w
        self.vx = 0
        self.vy = 0
        self.color = GREY
        self.m = m
        self.ax = 0
        self.ay = 0
        self.g = 0.03
        self.N = 0

    def move(self):
         self.vy -= - self.g * dt/30 - self.N/(1-self.N/50)*0.01
         self.y += self.vy * dt/30

    def imp(self):
        self.N = 0
        

    def draw(self):
        pygame.draw.rect(self.screen, self.color, pygame.Rect(self.x, self.y, self.h, self.w))
        pygame.draw.lines(self.screen, self.color, True, [[self.x, self.y], [self.x + self.h, self.y], [self.x + 0.5 * self.h, self.y - 30]], 30)

class Fu:

    def __init__(self, screen, x,  y):
        self.screen = screen
        self.x = x
        self.y = y
        self.r = 1
        self.vx = 0
        self.vy = 0
        self.g = 0.03
        self.color = RED
     
    def move(self):
        self.vy =  roc.vy + self.g * dt/30 * (1 + (self.y - roc.y - 450)/(roc.w -450)*10)
        self.y += self.vy * dt/30
        if (self.y-self.r)> (roc.y + roc.w):
            self.vy = 1
            self.y += self.vy * dt + self.g*dt*dt/2

     
    def draw(self):
        pygame.draw.circle(self.screen, self.color, (self.x, self.y), self.r)

    def imp(self):
        roc.N = 100

    def hittest(self, obj):
        dy = self.y
        dr = self.r
        x1 = obj.y
        x2 = obj.w 
        return((dy+dr)<(x1+x2) and (dy+3*dr)>(x1+x2))

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
B = []
A = []
for j in range(1,100,3):
    for i in range(1,100,3):
        fu = Fu(screen, x = 350 +  i, y = 450 + j)
        A.append(fu)

clock = pygame.time.Clock()
roc = Roc(screen)
finished = False

while not finished:
    screen.fill(WHITE)
    roc.draw()
    for fu in A:
        fu.draw()

    pygame.display.update()

    dt = clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True

    for a in A:
        a.move()
        if a.hittest(roc):
            fu.imp()
            roc.move()
            fu.move()
            roc.imp()
    roc.move()
    pygame.display.update()
    B.append(roc.vy)
    C = []
    for i in range(len(B)):
        C.append(int(i))
    print(roc.vy)
    print(roc.N)
pygame.quit()
x = np.array(range(len(B)))
y = np.vectorize(B)
plt.plot(x, y)
plt.show()
